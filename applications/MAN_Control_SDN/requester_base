/*
 * path_requester.c
 *
 *  Created on: 7 de mar de 2019
 *      Author: ruaro
 */
#include <api.h>
#include <service_api.h>
#include "path_requester.h"
#include "communication.h"
#include "noc_manager.h"

#define my_id 0

#define PARTIAL_CONNECTIONS_NR	(CONNECTIONS_NR/NC_NUMBER)
#define INDEX_OFFSET	(my_id*PARTIAL_CONNECTIONS_NR)

int global_path_counter = 0;


int search_cluster(int source_x, int source_y){
    unsigned int nc_x, nc_y;

    nc_x = source_x / XCLUSTER;
    nc_y = source_y / YCLUSTER;

    return (nc_x << 8 | nc_y);
}


void request_path(int conn){
	int coordinator_addr;
	int src_x, src_y, tgt_x, tgt_y, source, target;
	unsigned int * send_message = get_message_slot();

	source = conn >> 16;
	src_x = source >> 8;
	src_y = source & 0xFF;
	target = conn & 0xFFFF;
	tgt_x = target >> 8;
	tgt_y = target & 0xFF;

	coordinator_addr = search_cluster(src_x, src_y);

//#if SDN_DEBUG
	//Puts("\nController addr is "); Puts(itoa(coordinator_addr >> 8)); Puts("x"); Puts(itoa(coordinator_addr & 0xFF));
//#endif
	
	send_message[0] = PATH_CONNECTION_REQUEST;
	send_message[1] = src_x << 8 | src_y; //source
	send_message[2] = tgt_x << 8 | tgt_y; //target
	send_message[3] = GetMyID();
	send_message[4] = 1;

	send(coordinator_addr, send_message, 5);
	
//#if SDN_DEBUG
	//	Puts("\nPath request from "); Puts(itoa(src_x)); Puts("x"); Puts(itoa(src_y)); Puts(" -> "); Puts(itoa(tgt_x)); Puts("x"); Puts(itoa(tgt_y)); Puts(" sucessifully sent...\n\n");
//#endif
	//printf("Start time: %d\n", start);
}

int main(){

	unsigned int recv_message[SDN_MSG_SIZE];
	int req_mode, src_tgt, req_index;
	int path_size, path_overhead;
	unsigned int path_percentage;
	unsigned int requester_overhead, overhead_sum = 0, req_overhead_sum = 0;
	unsigned int path_latency, acumulated_path_latency;
	
	init_communication();
	
#if SPLIT
	Puts("SPLIT is true\n");
#else
	Puts("SPLIT is false\n");
#endif
	Puts("INDEX_OFFSET: "); Puts(itoa(INDEX_OFFSET)); Puts("\n");
	Puts("PARTIAL_CONNECTIONS_NR: "); Puts(itoa(PARTIAL_CONNECTIONS_NR)); Puts("\n");

	RequestServiceMode();

	int hop_soma = 0, hop_maior = 0, hop_menor = 8888888, path_sucess = 0;
	int is_global = 0, local_success_rate = 0, global_success_rate = 0;
	unsigned int source, target, subnet, aux_address, connection_ok, sx, sy, tx, ty;

	Puts("#begin_print\n");
	Puts("ID\tsource\ttarget\tglobal\toverhd\tlat\tmanhat\thop\tsubnet\n");

	acumulated_path_latency = 0;

#if SPLIT
	for(int i=0; i<PARTIAL_CONNECTIONS_NR; i++){
#else
	for(int i=0; i<CONNECTIONS_NR; i++){
#endif
		
		//Request a new SDN connection
#if SPLIT
		req_index = INDEX_OFFSET+i;
#else
		req_index = i;
#endif		
		
		//Gets the time before to request the path
		path_latency = GetTick();
		
		request_path(connections[req_index]);
		ReceiveService(recv_message);
		
		//Computes the time after ack
		path_latency = GetTick() - path_latency;
		acumulated_path_latency = acumulated_path_latency + path_latency;

		//printf("End time: %d\n", end);
		//printf("Total time: %d\n", cpu_time_used);

		connection_ok	= recv_message[2];
		source 			= recv_message[3];
		target 			= recv_message[4];
		subnet			= recv_message[5];
		path_overhead 	= recv_message[6]; 
		is_global 		= recv_message[7];
		path_size 		= recv_message[8];
		
		sx = source >> 8;
		sy = source & 0xFF;
		tx = target >> 8;
		ty = target & 0xFF;
		
		if ( source !=  (connections[req_index] >> 16)){
			Puts("ERROR ACK diferent from requested at source!\n");
			while(1);
		}
		if ( target !=  (connections[req_index] & 0xFFFF)){
			Puts("ERROR ACK diferent from requested at source!\n");
			while(1);
		}
		
		//Puts("ID\tsource\ttarget\tglobal\toverhd\tlaten\tmanhat\thop\tsubnet\n");
		//cpt number 
		Puts(itoa(req_index+1)); Puts("\t");
		//Source
		Puts(itoa(sx)); Puts("x"); Puts(itoa(sy)); Puts("\t");
		//target
		Puts(itoa(tx)); Puts("x"); Puts(itoa(ty)); Puts("\t");
		//Is global
		Puts(itoa(is_global)); Puts("\t");
		//Path Overhead
		Puts(itoa(path_overhead)); Puts("\t");
		//Path Latency
		Puts(itoa(path_latency)); Puts("\t");
		//Manhatan
		Puts( itoa((abs(sx-tx) + abs(sy-ty))) ); Puts("\t");
		
		if(connection_ok){
			//Path hops
			if (path_size == 0) {
				//Print path disabled
				Puts("0\t");
			} else {
				Puts(itoa(path_size-1)); Puts("\t");
			}
			//Subnet
			Puts(itoa(subnet)); Puts("\n");
		} else {
			//Path hops
			Puts("-1\t"); 
			//Subnet
			Puts("-1\n");
		}
		
		//Use this to stop a request in a specific place
		/*if (sx==10 && sy ==7 && tx==5 && ty==13){
			Puts("Saindo\n");
			exit();
		}*/


	}
	
	
	Puts("#end_print\n");
	Puts("ACUM. LATENCY: "); Puts(itoa(acumulated_path_latency));Puts(":req");Puts(itoa(my_id));Puts("\n");

#if SPLIT
	path_percentage = NC_NUMBER;
#else
	path_percentage = 1;
#endif
	
	exit(path_percentage);

}


